'use strict';

exports.__esModule = true;
var reduceProps = exports.reduceProps = function reduceProps(props) {
  return Object.keys(props).reduce(function (reducedProps, propKey) {
    if (propKey !== 'children') {
      reducedProps[propKey] = props[propKey];
    }
    return reducedProps;
  }, {});
};

var getPropType = exports.getPropType = function getPropType(prop) {
  var jsType = typeof prop;
  switch (jsType) {
    case 'array':
      return React.PropTypes.array;
    case 'boolean':
      return React.PropTypes.bool;
    case 'function':
      return React.PropTypes.func;
    case 'number':
      return React.PropTypes.number;
    case 'object':
      return React.PropTypes.object;
    case 'string':
      return React.PropTypes.string;
    case 'symbol':
      return React.PropTypes.symbol;
    default:
      new Error('React PropType not found for ' + jsType);
  }
};

var mapPropTypesToProps = exports.mapPropTypesToProps = function mapPropTypesToProps(props) {
  var reducedProps = reduceProps(props);
  var propTypes = {};
  for (var key in reducedProps) {
    propTypes[key] = getPropType(reducedProps[key]);
  }
  return propTypes;
};